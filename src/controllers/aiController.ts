// controllers/aiController.ts
import { Request, Response } from "express";
import axios from "axios";
import Segment from "../models/Segment";
import dotenv from "dotenv";
dotenv.config();


interface MessageSuggestionRequest {
  campaign_objective: string;
  segment_id?: string;
  target_audience_description?: string;
  brand_tone?: "friendly" | "professional" | "urgent" | "casual" | "playful";
  offer_type?:
    | "discount"
    | "new_product"
    | "reminder"
    | "seasonal"
    | "loyalty"
    | "flash_sale";
  audience_size?: number;
  budget_range?: "low" | "medium" | "high";
  campaign_duration?: "short" | "medium" | "long";
}

class GeminiAIService {
  private apiKey: string;
  private baseUrl: string =
    "https://generativelanguage.googleapis.com/v1/models/gemini-2.5-flash:generateContent";
  
  constructor() {
    this.apiKey = process.env.GEMINI_API_KEY || "";
    if (!this.apiKey) {
      console.warn("‚ö†Ô∏è GEMINI_API_KEY not found in environment variables");
    }
  }

  async generateMessages(prompt: string): Promise<any> {
    console.log("Using GEMINI_API_KEY:", this.apiKey ? "‚úÖ Loaded" : "‚ùå Missing");

    try {
      const response = await axios.post(
        `${this.baseUrl}?key=${this.apiKey}`,
        {
          contents: [
            {
              parts: [
                {
                  text: prompt,
                },
              ],
            },
          ],
          generationConfig: {
            temperature: 0.9, // Higher creativity for varied messages
            topK: 40,
            topP: 0.95,
            maxOutputTokens: 1024,
          },
        },
        {
          headers: {
            "Content-Type": "application/json",
          },
          timeout: 30000,
        }
      );

      const generatedText =
        response.data?.candidates?.[0]?.content?.parts?.[0]?.text;

      if (!generatedText) {
        throw new Error("No content generated by Gemini");
      }

      return generatedText;
    } catch (error) {
      console.error("Gemini API Error:", error.response?.data || error.message);
      throw error;
    }
  }
}

const geminiService = new GeminiAIService();

export const generateMessageSuggestions = async (
  req: Request,
  res: Response
) => {
  try {
    const {
      campaign_objective,
      segment_id,
      target_audience_description,
      brand_tone = "friendly",
      offer_type = "discount",
      audience_size,
      budget_range = "medium",
      campaign_duration = "medium",
    } = req.body as MessageSuggestionRequest;

    if (!campaign_objective) {
      return res.status(400).json({ error: "Campaign objective is required" });
    }

    // Get comprehensive segment data if segment_id provided
    let segmentContext = "";
    let segmentData = null;
    if (segment_id) {
      const segment = await Segment.findOne({ segment_id });
      if (segment) {
        segmentData = segment;
        segmentContext = `
TARGET AUDIENCE ANALYSIS:
- Segment: ${segment.name} (${segment.audience_size} customers)
- Profile: ${segment.description || "General audience"}
- Size: ${segment.audience_size} potential recipients
- Engagement Level: ${
          segment.audience_size > 10000
            ? "Large scale"
            : segment.audience_size > 1000
            ? "Medium scale"
            : "Focused group"
        }`;
      }
    }

    // Create intelligent, context-aware prompt
    const prompt = `You are an expert marketing copywriter and conversion specialist creating high-performing campaign messages for an e-commerce platform.

CAMPAIGN CONTEXT:
Objective: ${campaign_objective}
Brand Tone: ${brand_tone}
Offer Focus: ${offer_type}
Budget: ${budget_range} range campaign
Duration: ${campaign_duration} term campaign
${segmentContext}
${
  target_audience_description
    ? `Additional Context: ${target_audience_description}`
    : ""
}

AUDIENCE INSIGHTS TO CONSIDER:
${audience_size ? `- Audience Size: ${audience_size} customers` : ""}
- Communication preference: Modern, mobile-first audience
- Attention span: Short, impact-driven messaging required
- Value drivers: Personalization, exclusivity, clear benefits

PERFORMANCE REQUIREMENTS:
1. Generate exactly 3 distinct message variations with different psychological approaches
2. Each message must be 120-160 characters (SMS/push notification optimized)
3. Include {{name}} placeholder for personalization
4. Each message should use a different persuasion technique:
   - Message 1: Social proof/urgency approach
   - Message 2: Personal benefit/value approach  
   - Message 3: Exclusive/VIP treatment approach
5. Match the ${brand_tone} brand tone consistently
6. Focus on ${offer_type} but make it contextual to the objective
7. Include clear, compelling call-to-action
8. Optimize for mobile readability

PSYCHOLOGICAL TRIGGERS TO USE:
- Scarcity (limited time/quantity)
- Personalization (feels individually crafted)
- Social validation (others are doing it)
- Loss aversion (don't miss out)
- Reciprocity (we're giving you something)
- Authority (trusted brand/expert recommendation)

OUTPUT FORMAT - Return ONLY valid JSON:
{
  "suggestions": [
    {
      "message": "message text with {{name}} placeholder",
      "approach": "psychological approach used (e.g., 'urgency + social proof')",
      "tone_match": "how it matches the brand tone",
      "target_emotion": "primary emotion targeted",
      "cta_strength": "call-to-action effectiveness (high/medium/low)",
      "character_count": number,
      "expected_engagement": "predicted engagement level (high/medium/low)"
    }
  ]
}

EXAMPLES OF HIGH-CONVERTING PATTERNS:
${
  brand_tone === "urgent"
    ? `- "{{name}}, only 3 hours left! 25% off everything"
   - "{{name}}, your cart expires in 2 hours - save it now!"`
    : brand_tone === "professional"
    ? `- "{{name}}, exclusive 20% discount for valued customers"
   - "Dear {{name}}, your personalized offer is ready"`
    : brand_tone === "casual"
    ? `- "Hey {{name}}, something special just for you!"
   - "{{name}}, we picked this deal thinking of you"`
    : `- "Hi {{name}}, here's that discount you deserve!"
   - "{{name}}, your friends would be jealous of this deal!"`
}

Now generate 3 unique, high-converting message variations for: "${campaign_objective}"`;

    console.log("ü§ñ Generating AI messages for objective:", campaign_objective);

    const aiResponse = await geminiService.generateMessages(prompt);

    // Parse and validate AI response
    let suggestions = [];
    try {
      // Extract JSON from response
      let jsonStart = aiResponse.indexOf("{");
      let jsonEnd = aiResponse.lastIndexOf("}") + 1;

      if (jsonStart === -1 || jsonEnd === 0) {
        throw new Error("No JSON found in response");
      }

      const jsonString = aiResponse.substring(jsonStart, jsonEnd);
      const parsed = JSON.parse(jsonString);
      suggestions = parsed.suggestions || [];

      // Enhance and validate suggestions
      suggestions = suggestions.map((suggestion: any, index: number) => ({
        id: `ai_msg_${Date.now()}_${index}`,
        message: suggestion.message || "",
        approach: suggestion.approach || "general appeal",
        tone_match: suggestion.tone_match || brand_tone,
        target_emotion: suggestion.target_emotion || "interest",
        cta_strength: suggestion.cta_strength || "medium",
        character_count: (suggestion.message || "").length,
        expected_engagement: suggestion.expected_engagement || "medium",
        generated_at: new Date().toISOString(),
        ai_confidence: suggestions.length >= 3 ? "high" : "medium",
      }));
    } catch (parseError) {
      console.warn(
        "Failed to parse AI response, creating intelligent fallback"
      );
      suggestions = createIntelligentFallback(
        campaign_objective,
        brand_tone,
        offer_type,
        segmentData
      );
    }

    // Ensure we have exactly 3 suggestions
    const finalSuggestions = suggestions.slice(0, 3);
    if (finalSuggestions.length < 3) {
      const additional = createIntelligentFallback(
        campaign_objective,
        brand_tone,
        offer_type,
        segmentData
      );
      finalSuggestions.push(
        ...additional.slice(0, 3 - finalSuggestions.length)
      );
    }

    res.json({
      success: true,
      campaign_objective,
      suggestions: finalSuggestions,
      metadata: {
        ai_model: "gemini-pro",
        generation_time: new Date().toISOString(),
        audience_size: segmentData?.audience_size || audience_size || 0,
        tone_applied: brand_tone,
        offer_focus: offer_type,
        context_used: {
          has_segment_data: !!segmentData,
          has_custom_context: !!target_audience_description,
          campaign_scale:
            audience_size > 10000
              ? "large"
              : audience_size > 1000
              ? "medium"
              : "small",
        },
      },
    });
  } catch (error) {
    console.error("AI message generation error:", error);

    // Provide intelligent fallback
    const fallbackSuggestions = createIntelligentFallback(
      req.body.campaign_objective,
      req.body.brand_tone || "friendly",
      req.body.offer_type || "discount",
      null
    );

    res.json({
      success: false,
      error: "AI service temporarily unavailable, showing smart suggestions",
      campaign_objective: req.body.campaign_objective,
      suggestions: fallbackSuggestions,
      metadata: {
        ai_model: "intelligent_fallback",
        generation_time: new Date().toISOString(),
        fallback_reason: (error as Error).message,
      },
    });
  }
};

// Intelligent fallback system with psychological approaches
function createIntelligentFallback(
  objective: string,
  tone: string,
  offerType: string,
  segmentData: any
) {
  const lowerObjective = objective.toLowerCase();

  // Analyze objective for key patterns
  const patterns = {
    winback: /inactive|back|return|haven't|win.*back|re-engage/i.test(
      objective
    ),
    newProduct: /new|launch|introduce|announce|product|collection/i.test(
      objective
    ),
    highValue: /high.*value|vip|premium|best|top|loyal/i.test(objective),
    seasonal: /season|holiday|summer|winter|festive|special.*event/i.test(
      objective
    ),
    urgency: /urgent|quick|fast|immediate|now|today|limited/i.test(objective),
    discount: /discount|sale|off|save|deal|offer/i.test(objective),
  };

  // Generate 3 different psychological approaches
  const approaches = [
    generateUrgencyMessage(objective, tone, offerType, patterns, segmentData),
    generateValueMessage(objective, tone, offerType, patterns, segmentData),
    generateExclusiveMessage(objective, tone, offerType, patterns, segmentData),
  ];

  return approaches.map((approach, index) => ({
    id: `fallback_${Date.now()}_${index}`,
    ...approach,
    generated_at: new Date().toISOString(),
    ai_confidence: "fallback",
  }));
}

function generateUrgencyMessage(
  objective: string,
  tone: string,
  offerType: string,
  patterns: any,
  segmentData: any
) {
  let message = "";

  if (patterns.winback) {
    message =
      tone === "professional"
        ? "{{name}}, we miss you! Exclusive 25% off expires tonight."
        : tone === "casual"
        ? "Hey {{name}}, come back! 20% off just for you - ends soon!"
        : "{{name}}, last chance! Your 30% comeback discount expires in 24h.";
  } else if (patterns.newProduct) {
    message =
      tone === "professional"
        ? "{{name}}, early access: new collection launches in 2 hours!"
        : "{{name}}, be first! New arrivals drop at midnight - set reminder!";
  } else {
    message =
      tone === "urgent"
        ? "{{name}}, FLASH SALE: 40% off everything - 6 hours only!"
        : "{{name}}, don't wait! This 25% deal disappears at midnight.";
  }

  return {
    message,
    approach: "urgency + scarcity",
    tone_match: tone,
    target_emotion: "fear of missing out",
    cta_strength: "high",
    character_count: message.length,
    expected_engagement: "high",
  };
}

function generateValueMessage(
  objective: string,
  tone: string,
  offerType: string,
  patterns: any,
  segmentData: any
) {
  let message = "";

  if (patterns.winback) {
    message =
      tone === "professional"
        ? "{{name}}, thank you for being valued - here's 20% off your return."
        : "{{name}}, we've got something special waiting - 25% off inside!";
  } else if (patterns.highValue) {
    message = "{{name}}, VIP exclusive: 30% off + free shipping on everything.";
  } else {
    message =
      tone === "casual"
        ? "{{name}}, treat yourself! 20% off everything you love."
        : "{{name}}, you deserve this: personalized 25% discount inside.";
  }

  return {
    message,
    approach: "personal value + benefit",
    tone_match: tone,
    target_emotion: "self-worth",
    cta_strength: "medium",
    character_count: message.length,
    expected_engagement: "medium",
  };
}

function generateExclusiveMessage(
  objective: string,
  tone: string,
  offerType: string,
  patterns: any,
  segmentData: any
) {
  let message = "";

  if (patterns.winback) {
    message = "{{name}}, member-only comeback offer: 35% off (just for you).";
  } else if (patterns.newProduct) {
    message =
      "{{name}}, insider preview: see new collection before anyone else!";
  } else {
    message =
      segmentData?.audience_size > 5000
        ? "{{name}}, you're 1 of 500 selected: exclusive 30% discount."
        : "{{name}}, hand-picked offer: private 25% discount just for you.";
  }

  return {
    message,
    approach: "exclusivity + social proof",
    tone_match: tone,
    target_emotion: "special/important",
    cta_strength: "high",
    character_count: message.length,
    expected_engagement: "high",
  };
}
